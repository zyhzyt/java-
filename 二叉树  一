import java.util.*;

class Node {
    public char val;
    public Node left;
    public Node right;

    public Node(char val) {
        this.val = val;
    }
}
public class BinaryTree {

    public Node createTree() {
        Node A = new Node('A');
        Node B = new Node('B');
        Node C = new Node('C');
        Node D = new Node('D');
        Node E = new Node('E');
        Node F = new Node('F');
        Node G = new Node('G');
        Node H = new Node('H');
        A.left = B;
        A.right = C;
        B.left = D;
        B.right = E;
        E.right = H;
        C.left = F;
        C.right = G;
        return A;
    }



    // 前序遍历
    void preOrderTraversal(Node root){
        if(root == null) return;
        System.out.print(root.val+" ");
        preOrderTraversal(root.left);
        preOrderTraversal(root.right);
    }

    // 中序遍历
    void inOrderTraversal(Node root){
        if(root == null) return;
        inOrderTraversal(root.left);
        System.out.print(root.val+" ");
        inOrderTraversal(root.right);
    }

    // 后序遍历
    void postOrderTraversal(Node root){
        if(root == null) return;
        postOrderTraversal(root.left);
        postOrderTraversal(root.right);
        System.out.print(root.val+" ");
    }

    // 遍历思路-求结点个数
    static int size = 0;
    void getSize1(Node root){
        if(root == null)return;
        size++;
        getSize1(root.left);
        getSize1(root.right);
    }

    // 子问题思路-求结点个数
    int getSize2(Node root){
        if(root == null) return 0;
        return getSize2(root.left)+getSize2(root.right)+1;
    }

    // 遍历思路-求 叶子结点 个数
    static int leafSize = 0;
    void getLeafSize1(Node root){
        if(root == null) return ;
        if(root.left == null && root.right == null) {
            leafSize++;
        }
        getLeafSize1(root.left);
        getLeafSize1(root.right);
    }

    // 子问题思路-求叶子结点个数
    int getLeafSize2(Node root) {
        if(root == null) return 0;
        if(root.left == null && root.right == null) {
            return 1;
        }
        return getLeafSize2(root.left)+getLeafSize2(root.right);
    }

    // 子问题思路-求第 k 层结点个数
    int getKLevelSize(Node root,int k){
        if(root == null) return 0;
        if(k == 1) {
            return 1;
        }
        return getKLevelSize(root.left,k-1)
                +getKLevelSize(root.right,k-1);
    }

    // 获取二叉树的高度
    int getHeight(Node root) {
        if(root == null) return 0;
        int left = getHeight(root.left);
        int right = getHeight(root.right);
        return left > right ? left+1 : right+1;
    }

    /*查找 val 所在结点，没有找到返回 null
     按照 根 -> 左子树 -> 右子树的顺序进行查找
     一旦找到，立即返回，不需要继续在其他位置查找*/
    Node find(Node root, char val) {
        /*if (root == null) return null;
        if(root.val != val) {
            find(root.left,root.val);
            find(root.right,root.val);
        }
        return root;*/
        if(root == null) {
            return null;
        }
        //1、根     return
        if(root.val == val) {
            return root;
        }
        //2、左     return
        Node ret1 = find(root.left,val);
        if(ret1 != null) {
            return ret1;
        }
        //3、右边   return
        Node ret2 = find(root.right,val);
        if(ret2 != null) {
            return ret2;
        }
        return null;
    }


    //如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。
    public boolean isSameTree(Node p, Node q) {
        if (p == null && q == null) {
            return true;
        }if (p == null || q == null) {
            return false;
        }if (p.val != q.val) {
            return false;
        } else {
            return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
        }
    }


    /*给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。
    s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树*/
    public boolean isSubtree(Node s,Node t) {
        if (s == null || t == null) return false;
        if (isSameTree(s,t)) return true;
        if (isSubtree(s.left,t)) return true;
        if (isSubtree(s.right,t)) return true;
        return false;
        /*if (s.val == t.val && s.right.val == t.right.val && s.left.val == t.left.val) {
            Node a = s.left;
            Node b = s.right;
            Node c = t.left;
            Node d = t.right;
            if (a != null || c != null || b != null && d != null) {
                return false;
            } else
                return isSubtree(s.left,t.left) && isSubtree(s.right,t.right);
        }
        return false;*/
    }


    //一棵高度平衡二叉树定义为：
    //一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1
    public boolean isBalanced(Node root) {
        if(root == null) return true;
        int left = getHeight(root.left);
        int right = getHeight(root.right);
        return left > right+1 ? true : false;
    }

    //给定一个二叉树，检查它是否是镜像对称的
    public boolean isSymmetricChild(Node leftTree,Node rightTree) {
        if(leftTree == null && rightTree != null || leftTree != null
                && rightTree == null) {
            return false;
        }
        if(leftTree == null && rightTree == null) {
            return true;
        }
        if(leftTree.val != rightTree.val) {
            return false;
        }
        return isSymmetricChild(leftTree.left,rightTree.right) &&
                isSymmetricChild(leftTree.right,rightTree.left);
    }
    public boolean isSymmetric(Node root) {
        if(root == null) return true;
        return isSymmetricChild(root.left,root.right);
    }

    // 层序遍历
    public void levelOrderTraversal(Node root) {
        if(root == null) {
            return;
        }
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            Node cur = queue.poll();
            System.out.print(cur.val+" ");
            if(cur.left != null) {
                queue.offer(cur.left);
            }
            if(cur.right != null) {
                queue.offer(cur.right);
            }
        }
    }

    //分层遍历
    public List<List<Character>> levelOrder(Node root) {
        List<List<Character>> ret = new ArrayList<>();
        if(root == null) {
            return ret;
        }
        //queue:保证顺序
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            //rowList:每一行的数据
            List<Character> rowList = new ArrayList<>();
            int count = queue.size();//1
            while (count != 0) {//2->1
                Node cur = queue.poll();
                if(cur != null) {
                    rowList.add(cur.val);
                    if(cur.left != null) {
                        queue.offer(cur.left);
                    }
                    if(cur.right != null) {
                        queue.offer(cur.right);
                    }
                }
                count--;//0
            }
            ret.add(rowList);
        }
        return ret;
    }


    // 判断一棵树是不是完全二叉树
    boolean isCompleteTree1(Node root) {
        if(root == null) {
            return true;
        }
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            Node cur = queue.poll();
            if(cur != null) {
                queue.offer(cur.left);
                queue.offer(cur.right);
            }else {
                break;
            }
        }
        //判断队列剩下的元素  是否有非空的元素
        while (!queue.isEmpty()) {
            Node cur = queue.peek();
            if(cur != null) {
                return false;
            }else {
                queue.poll();
            }
        }
        return true;
    }


    /*编一个程序，读入用户输入的一串先序遍历字符串，根据此字符串建立一个二叉树（以指针方式存储）
    例如如下的先序遍历字符串： ABC##DE#G##F### 其中“#”表示的是空格，空格字符代表空树。建
     立起此二叉树以后，再对二叉树进行中序遍历，输出遍历结果*/



    //给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。
    public Node lowestCommonAncestor(Node root, Node p, Node q) {
        if (root == null) return null;
        if (root == p || root ==q ) return root;
        Node left = lowestCommonAncestor(root.left,p,q);
        Node right = lowestCommonAncestor(root.right,p,q);
        if (left != null && right != null) return root;
        if (left != null) return left;
        if (right != null) return right;
        return null;
    }


    /*输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。
     要求不能创建任何新的结点，只能调整树中结点指针的指向*/
    public Node prev = null;
    public  void ConvertChild(Node root) {
        if(root == null) return ;
        ConvertChild(root.left);
        root.left = prev;
        if(prev != null) {
            prev.right = root;
        }
        prev = root;
        ConvertChild(root.right);
    }
    public  Node Convert(Node pRootOfTree) {
        if(pRootOfTree == null) return null;
        ConvertChild(pRootOfTree);
        Node head = pRootOfTree;
        while (head.left != null) {
            head = head.left;
        }
        return head;
    }



    //你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。
    //空节点则用一对空括号 "()" 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对
    public void tree2strChild(Node t,StringBuilder sb) {
        if(t == null) return;
        sb.append(t.val);
        if(t.left == null) {
            if(t.right == null) {
                return;
            }else {
                sb.append("()");
            }
        }else {
            sb.append("(");
            tree2strChild(t.left,sb);
            sb.append(")");
        }

        if(t.right == null) {
            return;
        }else {
            sb.append("(");
            tree2strChild(t.right,sb);
            sb.append(")");
        }
    }
    public String tree2str(Node t) {
        if(t == null) return null;
        StringBuilder sb = new StringBuilder();
        tree2strChild(t,sb);
        return sb.toString();
    }




    //根据一棵树的前序遍历与中序遍历构造二叉树
    public int preIndex = 0;
    public Node buildTreeChild(char[] preorder,
                               char[] inorder,int inbegin,int inend) {
        if(inbegin > inend) {
            return null;
        }
        Node root = new Node(preorder[preIndex]);
        int inorderIndex = findInoderIndexOfRoot(inorder,
                inbegin,inend,preorder[preIndex]);
        preIndex++;
        root.left = buildTreeChild(preorder,
                inorder,inbegin,inorderIndex-1);
        root.right = buildTreeChild(preorder,
                inorder,inorderIndex+1,inend);
        return root;
    }
    public int findInoderIndexOfRoot(char[] inorder,
                                     int inbegin,int inend,char val) {
        for (int j = inbegin; j <= inend; j++) {
            if(inorder[j] == val) {
                return j;
            }
        }
        return -1;
    }
    public Node buildTree(char[] preorder, char[] inorder) {
        if(preorder == null || inorder == null) {
            return null;
        }
        if(preorder.length == 0 || inorder.length == 0) {
            return null;
        }
        return buildTreeChild(preorder,inorder,
                0,inorder.length-1);
    }


    /*给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度
    每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的null节点也计入长度）之间的长度
     */
    public int widthOfBinaryTree(Node root) {
        if(root == null) return 0;
        Queue<Node> queue = new LinkedList<>();
        LinkedList<Integer> list = new LinkedList<>();
        queue.offer(root);
        list.add(1);
        int res = 1;
        while (!queue.isEmpty()) {
            int count = queue.size();
            for(int i =count; i> 0; i--) {
                Node cur = queue.poll();
                Integer curIndex = list.removeFirst();
                if(cur.left != null) {
                    queue.offer(cur.left);
                    list.add(curIndex * 2);
                }
                if(cur.right != null) {
                    queue.offer(cur.right);
                    list.add(curIndex * 2 +1);
                }
            }
            if(list.size() >= 2) {
                res = Math.max(res, list.getLast() - list.getFirst() + 1);
            }
        }
        return res;
    }



    //若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，
    // 第 h 层所有的结点都连续集中在最左边，这就是完全二叉树
    public boolean isCompleteTree(Node root) {
        Queue<Node> queue = new LinkedList<>();
        Node prev1 = root;
        queue.add(root);
        while (!queue.isEmpty()) {
            Node cur = queue.poll();
            if (prev1 == null && cur != null)
                return false;
            if (cur != null) {
                queue.offer(cur.left);
                queue.offer(cur.right);
            }
            prev1 = cur;
        }
        return true;
    }


    /*给你一个树，请你 按中序遍历 重新排列树，使树中最左边的结点现在是树的根，
    并且每个结点没有左子结点，只有一个右子结点
    */
    Node pre;
    public Node increasingBST(Node root) {
        if (root == null) {
            return null;
        }
        Node ret = new Node('0');
        pre = ret;
        newTree(root);

        return ret.right;
    }
    public void newTree(Node root) {
        if (root == null) {
            return;
        }
        newTree(root.left);
        root.left = null;
        pre.right = root;
        pre = root;
        newTree(root.right);
    }

    //非递归
    // 前序遍历
    void preOrderTraversal1(Node root) {
        Stack<Node> stack = new Stack<>();
        if (root == null) return;
          Node cur = root;
          while (cur != null || !stack.empty()) {
              while (cur != null) {
                  System.out.println(cur.val+" ");
                  stack.push(cur);
                  cur = cur.left;
              }
              Node top = stack.pop();
              cur = top.right;
          }
    }
    // 中序遍历
    void inOrderTraversal1(Node root) {
        Stack<Node> stack = new Stack<>();
        if (root == null) return;
        Node cur = root;
        while (cur != null || !stack.empty()) {
            while (cur != null) {
                stack.push(cur);
                cur = cur.left;
            }
            Node top = stack.pop();
            System.out.println(top.val+" ");
            cur = top.right;
        }
    }
    // 后序遍历
    void postOrderTraversal1(Node root) {
        Stack<Node> stack = new Stack<>();
        if (root == null) return;
        Node cur = root;
        Node prev2 = null;
        while (cur != null || !stack.empty()) {
            while (cur != null) {
                stack.push(cur);
                cur = cur.left;
            }
            cur = stack.peek();
            if (cur.right == null || cur.right == prev2) {
                stack.pop();
                System.out.println(cur.val+" ");
                prev2 = cur;
                cur = null;
            } else {
                cur = cur.right;
            }
        }
    }



}




public class Text {

    public static void main(String[] args) {
        BinaryTree binaryTree = new BinaryTree();
        Node root = binaryTree.createTree();
        System.out.println();
        binaryTree.preOrderTraversal(root);
        System.out.println();
        binaryTree.inOrderTraversal(root);
        System.out.println();
        binaryTree.postOrderTraversal(root);
        System.out.println();
        System.out.println(binaryTree.getLeafSize2(root));
        binaryTree.getLeafSize1(root);
        System.out.println(BinaryTree.leafSize);
        System.out.println("=============================");
        System.out.println(binaryTree.getKLevelSize(root,3));
        System.out.println("=================================");
        System.out.println(binaryTree.getHeight(root));
        System.out.println("========================");
        Node ret = binaryTree.find(root,'K');
        if(ret == null) {
            System.out.println("没有这个节点");
        }else {
            System.out.println(ret.val);
        }
        binaryTree.levelOrderTraversal(root);
        System.out.println();
    }


}



