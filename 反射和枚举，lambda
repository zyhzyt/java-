package reflecttext;



class Student {
    //私有属性name
    private String name = "bit";
    //公有属性age
    public int age = 18;
    //不带参数的构造方法
    public Student(){
        System.out.println("Student()");
    }

    private Student(String name,int age) {
        this.name = name;
        this.age = age;
        System.out.println("Student(String,name)");
    }

    private void eat(){
        System.out.println("i am eat");
    }

    public void sleep(){
        System.out.println("i am pig");
    }

    private void function(String str) {
        System.out.println(str);
    }

    @Override
    public String toString() {
        return "Student{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
}
public class Text {

    public static void main(String[] args) {
        Student student1 = new Student();
        //Student student2 = new Student("abc",78);

    }
    public static void main1(String[] args) {

        /**
         * 1、getClass();
         */
        Student student = new Student();
        Class<?> c1 = student.getClass();


        //2、类名.class
        Class<?> c2 = Student.class;

        //3、全限定 -》 路径
        try {
            Class<?> c3 = Class.forName("com.gaobo.reflectdemo.Student");
            System.out.println(c1 == c2);
            System.out.println(c1 == c3);
            System.out.println(c2 == c3);
        }catch (ClassNotFoundException e) {
            e.printStackTrace();
        }




        /*System.out.println(String.class.getClassLoader());
        System.out.println(Person.class.getClassLoader());*/
    }
}


package reflecttext;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;



// 创建对象
public class ReflectClass {
    public static void reflectNewInstance() {
        try {
            Class<?> classStudent =
                    Class.forName("com.gaobo.reflectdemo.Student");
            Object objectStudent = classStudent.newInstance();
            Student student = (Student) objectStudent;
            System.out.println("获得学生对象："+student);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    // 反射私有的构造方法
    public static void reflectPrivateConstructor() {
        try {
            Class<?> classStudent =
                    Class.forName("com.gaobo.reflectdemo.Student");

            //注意传入对应的参数
            Constructor<?> declaredConstructorStudent =
                    classStudent.getDeclaredConstructor(String.class,int.class);

            //Constructor<?> declaredConstructorStudent
            // = classStudent.getConstructor();

            //setAccessible  设置为true后    可修改访问权限
            declaredConstructorStudent.setAccessible(true);

            Object objectStudent =
                    declaredConstructorStudent.newInstance("高博",15);

            //Object objectStudent =
            // declaredConstructorStudent.newInstance();

            Student student = (Student) objectStudent;


            System.out.println("获得私有构造哈数且修改姓名和年龄："+student);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    // 反射私有属性
    public static void reflectPrivateField() {
        try {
            Class<?> classStudent =
                    Class.forName("com.gaobo.reflectdemo.Student");

            Field field  = classStudent.getDeclaredField("name");

            field.setAccessible(true);

            //可以修改该属性的值
            Object objectStudent = classStudent.newInstance();
            Student student = (Student) objectStudent;

            //field.set(修改的属性的对象的引用,  修改的值);
            field.set(student,"小明");

            //field.get(这个对象的某个属性)
            String name = (String) field.get(student);
            System.out.println("反射私有属性修改了name："+ name);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    // 反射私有方法
    public static void reflectPrivateMethod() {
        try {
            Class<?> classStudent = Class.forName("com.gaobo.reflectdemo.Student");
            Method methodStudent = classStudent.
                    getDeclaredMethod("function",String.class);
            System.out.println("私有方法的方法名为："+methodStudent.getName());

            //私有的一般都要加
            methodStudent.setAccessible(true);

            Object objectStudent = classStudent.newInstance();
            Student student = (Student) objectStudent;
            //通过反射调用方法
            methodStudent.
                    invoke(student,"我是给私有的function函数传的参数");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }



    public static void main(String[] args) {
        //reflectNewInstance();
        reflectPrivateMethod();
    }
}



package textenum;

public class Text {
    public static final int  RED = 1;
    public static final int  GREEN = 2;
    public static final int  BLACK = 3;



    public static void main(String[] args) {
        int a = 1;
        switch (a) {
            case 1:

        }

    }
}


package textenum;


import java.lang.reflect.Constructor;

/**
 * Description:
 *     1、我们自己写的枚举类  会默认继承与Enum
 *     values:方法为什么不在Enum
 *     2、枚举的构造方法默认是私有的
 *     3、反射枚举
 */
public enum TextEnum {
    //RED : 对象
    RED("红色",1),BLACK("黑色",2),
    WHITE("白色",4);

    public String color ;
    public int ordinal;

    /*TestEnum() {

    }*/

    TextEnum(String color,int ordinal) {
        this.color = color;
        this.ordinal = ordinal;
    }

    public static TextEnum getEnumKey (int key) {
        for (TextEnum t: TextEnum.values()) {
            if(t.ordinal == key) {
                return t;
            }
        }
        return null;
    }

    public static void reflectPrivateConstructor() {
        try {
            Class<?> classStudent =
                    Class.forName("com.gaobo.enumdemo.TestEnum");
            //注意传入对应的参数,获得对应的构造方法来构造对象,当前枚举类是提供了两个参数分别是String和int。
            Constructor<?> declaredConstructorStudent
                    = classStudent.getDeclaredConstructor(String.class,int.class,
                    String.class,int.class);

            //设置为true后可修改访问权限
            declaredConstructorStudent.setAccessible(true);


            Object objectStudent
                    = declaredConstructorStudent.newInstance("绿色",666,"fafa",99);
            TextEnum testEnum = (TextEnum) objectStudent;

            System.out.println("获得枚举对象："+testEnum);


        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public static void main(String[] args) {
        reflectPrivateConstructor();
    }

    public static void main2(String[] args) {
        TextEnum[] testEnums = TextEnum.values();
        for (int i = 0; i < testEnums.length; i++) {
            System.out.println(testEnums[i].ordinal());
        }
        System.out.println(TextEnum.valueOf("BLACK"));

        TextEnum testEnum1 = BLACK;
        /*TestEnum testEnum2 = GREEN;
        System.out.println(testEnum1.compareTo(testEnum2));
        //序号
        System.out.println(BLACK.compareTo(GREEN));*/
    }
    public static void main1(String[] args) {
        TextEnum testEnum2 = TextEnum.BLACK;
        switch (testEnum2) {
            case RED:
                System.out.println("red");
                break;
            case BLACK:
                System.out.println("black");
                break;
            case WHITE:
                System.out.println("WHITE");
                break;
           /* case GREEN:
                System.out.println("black");
                break;*/
            default:
                break;
        }
    }
}



package lambdatext;

//函数式接口
@FunctionalInterface
interface NoParameterNoReturn {
    //注意：只能有一个方法
    void test();
}
//无返回值一个参数
@FunctionalInterface
interface OneParameterNoReturn {
    void test(int a);
}
//无返回值多个参数
@FunctionalInterface
interface MoreParameterNoReturn {
    void test(int a,int b);
}

//有返回值无参数
@FunctionalInterface
interface NoParameterReturn {
    int test();
}

//有返回值一个参数
@FunctionalInterface
interface OneParameterReturn {
    int test(int a);
}
//有返回值多参数
@FunctionalInterface
interface MoreParameterReturn {
    int test(int a,int b);
}

public class Text {
    public static void main(String[] args) {
      /*  NoParameterReturn np = ()->{return 10;};
        NoParameterReturn np2 = ()->10;
        System.out.println(np.test());
        System.out.println(np2.test());*/

        /*OneParameterReturn op = (a)->{return a;};
        OneParameterReturn op2 = a->a;
        System.out.println(op.test(10));
        System.out.println(op2.test(30));*/

        MoreParameterReturn mr = (int a,int b)->{
            return a+b;
        };
        System.out.println(mr.test(10, 20));

        MoreParameterReturn mr2 = (a,b)-> a+b;
        System.out.println(mr2.test(10, 20));

    }
    public static void main1(String[] args) {
        NoParameterNoReturn noParameterNoReturn = ()->{
            System.out.println("hello");
        };
        noParameterNoReturn.test();

        OneParameterNoReturn op = a->System.out.println(a);
        op.test(10);

        MoreParameterNoReturn mp = (int a, int b)->{
            System.out.println(a+b);
        };
        mp.test(10,20);
    }
}


package lambdatext;

import java.util.ArrayList;
import java.util.HashMap;

class Test {
    public void func(){}
}
@FunctionalInterface
interface NoParameterNoReturn2 {
    void test();
}


public class TestDemo {


    public static void main(String[] args) {
        HashMap<Integer, String> map = new HashMap<>();
        map.put(1, "hello");
        map.put(2, "bit");
        map.put(3, "hello");
        map.put(4, "lambda");
       /* map.forEach(new BiConsumer<Integer, String>() {
            @Override
            public void accept(Integer integer, String s) {
                System.out.println("key: "+integer +" value: "+s);
            }
        });*/
       /* map.forEach((key,value) -> {
            System.out.println("key: "+key +" value: "+value);
        });*/

        map.forEach((key,value) -> System.out.println("key: "+key +" value: "+value));
    }

    public static void main4(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("cello");
        list.add("bit");
        list.add("dello");
        list.add("aambda");
        /*list.sort(new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                return o1.compareTo(o2);
            }
        });*/
        //list.sort( (o1,o2)->{return o1.compareTo(o2);});
        list.sort( (o1,o2)-> o1.compareTo(o2) );
        //System.out.println(list);
        list.forEach((s)->System.out.println(s));
    }

    public static void main3(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("bit");
        list.add("hello");
        list.add("lambda");
        list.forEach((s)->System.out.println(s));

       /* list.forEach(new Consumer<String>() {
            @Override
            public void accept(String s) {
                System.out.println(s);
            }
        });*/



    }

    public static void main2(String[] args) {
        int a = 99;
        //a = 9999;
        NoParameterNoReturn2 np = ()->{
            //a = 88;
            System.out.println(a);
        };
        np.test();
    }
    /**
     * 匿名内部类当中  捕获的变量 一定是常量或者
     * 没有发生过改变的量
     * @param args
     */
    public static void main1(String[] args) {
        final int a = 10;
        new Test(){
            public void func(){
                System.out.println(a);
            }
        }.func();

    }
}
