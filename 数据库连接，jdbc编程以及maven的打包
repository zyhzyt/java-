<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>20201120</artifactId>
    <version>1.0-SNAPSHOT</version>


    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <!--依赖包-->
    <dependencies>
        <dependency>
            <groupId>mysql</groupId>   <!--阻止名，一般是使用公司域名-->
            <artifactId>mysql-connector-java</artifactId> <!--产品名-->
            <version>5.1.49</version>   <!--依版本号-->
        </dependency>
    </dependencies>

</project>


package test.jdbc;

import java.math.BigDecimal;
import java.sql.*;

public class Text {
    public static void main(String[] args) {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            // 加载JDBC驱动程序：反射，这样调用初始化com.mysql.jdbc.Driver类，即将该类加载到JVM方法区，并执行该类的静态方法块、静态属性。
            Class.forName("com.mysql.jdbc.Driver");

            // 第一步：创建数据库连接
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/chong?user=root&password=wdtdz123&useUnicode=true&useSSL=false&characterEncoding=UTF-8");
            System.out.println(connection);

            // 第二步：创建了操作命令对象
            statement = connection.createStatement();

            // 第三步：执行sql
            resultSet = statement.executeQuery("select id,name,role,salary from emp");

            // 第四步：处理结果集ResultSet（类似List<Map<String, 字段类型>>）
            while (resultSet.next()){//遍历每一行数据
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String role = resultSet.getString("role");
                BigDecimal salary = resultSet.getBigDecimal("salary");
                System.out.printf("id=%s, name=%s, role=%s, salary=%s%n",
                        id, name, role, salary);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            //释放资源
            try {
                if(resultSet != null)
                    resultSet.close();
                if(statement != null)
                    statement.close();
                if(connection != null)
                    connection.close();
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }
        }


    }
}


package test.jdbc;

import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class Main4 {

    public static void main(String[] args) {
//        query("马云' or '1' = '1");//使用PreparedStatement可以防止sql注入
        update("马");
    }
    public static void update(String updateName) {
        Connection connection = null;
        PreparedStatement statement = null;
        try {
            //创建数据库连接池
            DataSource dataSource = new MysqlDataSource();
            ((MysqlDataSource) dataSource).setUrl("jdbc:mysql://localhost:3306/chong?user=root&password=123456&useUnicode=true&useSSL=false&characterEncoding=UTF-8");
            // 第一步：创建数据库连接
            connection = dataSource.getConnection();
            System.out.println(connection);

            String sql = "update emp set salary=salary+1 where name like ?";
            // 第二步：创建了操作命令对象（带占位符的sql在数据库预编译，可以提高效率，占位符的方式，可以防止sql注入）
            statement = connection.prepareStatement(sql);

            //替换占位符
            statement.setString(1, "%"+updateName+"%");
            System.out.println(statement);
            // 第三步：执行sql，新增/修改/删除都是executeUpdate
            int r = statement.executeUpdate();
            System.out.println(r);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            //释放资源
            try {
                if(statement != null)
                    statement.close();
                if(connection != null)
                    connection.close();
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }
        }


    }
}



