import java.sql.SQLOutput;
import java.util.Arrays;

public class Work {


    //数组

    //创建一个 int 类型的数组, 元素个数为 100, 并把每个元素依次设置为 1 - 100
    public static void main(String[] args) {
        int[] arr = new int[100];
        shezhi(arr);
        System.out.println(Arrays. toString(arr));
    }

    public static int[] shezhi(int[] array4) {
        for(int i = 0;i < 100; i++){
            array4[i] = i + 1;
        }
        return array4;
    }


    //实现一个方法 printArray, 以数组为参数, 循环访问数组中的每个元素, 打印每个元素的值
    public static void main7(String[] args) {
        int[] array= {1,2,3,4,5};
        printArray(array);
    }

    public static void printArray(int[] array3) {
        for (int i = 0; i < array3.length; i++) {
            int m = array3[i];
            System.out.println(m);
        }
    }



    //实现一个方法 transform, 以数组为参数, 循环将数组中的每个元素乘以2,并设置到对应的数组元素上. 例如 原数组为 {1, 2, 3}, 修改之后为 {2, 4, 6}
    public static int[] transform(int[] array2) {
        //tmp当中 存放的就是拷贝后的数据
        for (int i = 0; i < array2.length ; i++) {
            array2[i] = array2[i]*2;
        }
        return array2;
    }

    public static void main6(String[] args) {
        int[] array = {1,2,3};
        transform(array);
        System.out.println(Arrays.toString(array));
    }


    //实现一个方法 sum, 以数组为参数, 求数组所有元素之和
    public static void main5(String[] args) {
        int[] array1= {1,2,3,4,5};
        sum(array1);
        System.out.println(sum(array1));
    }

    public static int sum(int[] array1) {
        int ret = 0;
        for (int i = 0; i < array1.length; i++) {
            int m = array1[i];
            ret += m;
        }
        return ret;
    }



    //数组中所有元素的平均值
    public static void main4(String[] args) {
        int[] array= {1,2,3,4,5};
        avg(array);
        System.out.println(avg(array));
    }

    public static int avg(int[] array) {
        int ret = 0;
        for (int i = 0; i < array.length; i++) {
            int m = array[i];
            ret += m;
        }
        return ret/(array.length);
    }


    //汉诺塔
    public static void main3(String[] args) {
        hanoiTower(1,'A','B','C');
        System.out.println();
        hanoiTower(2,'A','B','C');
        System.out.println();
        hanoiTower(3,'A','B','C');
    }

    public static void move(char pos1,char pos2) {
        System.out.print(pos1+"->"+pos2+" ");
    }
    /**
     * @param n    盘子数量
     * @param pos1 盘子所在的位置
     * @param pos2 中转位置
     * @param pos3 目的位置
     */
    public static void hanoiTower(int n,char pos1,char pos2,char pos3) {
        if(n == 1) {
            move(pos1,pos3);
            return;
        }
        hanoiTower(n-1,pos1,pos3,pos2);
        move(pos1,pos3);
        hanoiTower(n-1,pos2,pos1,pos3);
    }




    //非递归求青蛙
    public static void main2(String[] args) {
        System.out.println(qingwa(6));
    }

    public static int qingwa(int n) {
        if (n == 1 || n == 2) {
            return n;
        }
        int f1 = 1;
        int f2 = 2;
        int f3 = 1;
        for (int i = 3; i <= n ; i++) {
            f3 = f1+f2;
            //确定f1 f2的新的值
            f1 = f2;
            f2 = f3;
        }
        return f3;
    }

    //递归求青蛙
    public static void main1(String[] args) {
        System.out.println(qing(5));
    }

    public static int qing(int n) {
        if (n == 1) {
            return 1;
        } if (n == 2)  {
            return 2;
        } return qing(n-1)+qing(n-2);
    }


}


    //给定一个有序整型数组, 实现二分查找
    public static int youxu(int[] arrays,int key) {
        int max = arrays.length-1;
        int min = 0;
        while (min <= max) {
            int mid = (max+min)/2;
            if(arrays[mid] < key) {
                min = mid+1;
            }else if(arrays[mid] > key) {
                max = mid-1;
            }else {
                return mid;
            }
        }
        return -1;//没有找到
    }

    public static void main3(String[] args) {
        int[] arrays = {1,2,3,4,5,6,7,8,9};
        System.out.println(youxu(arrays, 456));
    }




    //实现一个方法 toString, 把一个整型数组转换成字符串. 例如数组 {1, 2, 3} , 返回的字符串为 "[1, 2, 3]", 注意 逗号 的位置和数量
    public static String string(int[] array) {
        if(array == null) {
            return "";
        }
        if(array.length == 0) {
            return "[]";
        }
        String ret = "[ ";
        for (int i = 0; i < array.length; i++) {
            ret = ret + array[i];//[ 1,
            //当时最后一个元素的时候，不加,
            if(i == array.length-1) {
                ret += ", ";
            }
        }
        ret += " ]";
        return ret;
    }

    public static void main5(String[] args) {
        int[] array = {1,2,3};
        System.out.println(string(array));
        System.out.println(string(null));

        int[] array2 = {};
        System.out.println(string(array2));

    }



    //实现一个方法 copyOf, 对一个整型数组进行拷贝, 得到一个新的数组
    public static void main4(String[] args) {
        int[] array = {1,2,3,4,5};
        int[] copy = Arrays.copyOf(array,array.length);
        System.out.println(Arrays.toString(copy));
    }

}

