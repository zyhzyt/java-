<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.control.cell.*?>

<GridPane xmlns:fx="x" fx:id="rootPane" alignment="center" hgap="10" vgap="10" fx:controller="com.zyh.ui.AppController">
    <Button onMouseClicked="#choose" prefWidth="90" text="选择目录" GridPane.columnIndex="0" GridPane.rowIndex="0"/>

    <Label fx:id="srcDirectory">
        <GridPane.margin>
            <Insets left="100.0"/>
        </GridPane.margin>
    </Label>

    <TextField fx:id="searchField" prefWidth="900" GridPane.columnIndex="0" GridPane.rowIndex="1"/>

    <TableView fx:id="fileTable" prefHeight="700" prefWidth="900" GridPane.columnIndex="0" GridPane.columnSpan="2"
               GridPane.rowIndex="2">
        <columns>
            <TableColumn fx:id="nameColumn" prefWidth="220" text="名称">
                <cellValueFactory>
                    <PropertyValueFactory property="name"/>
                </cellValueFactory>
            </TableColumn>

            <TableColumn prefWidth="400" text="路径">
                <cellValueFactory>
                    <PropertyValueFactory property="path"/>
                </cellValueFactory>
            </TableColumn>

            <TableColumn fx:id="sizeColumn" prefWidth="120" text="大小">
                <cellValueFactory>
                    <PropertyValueFactory property="LengthUI"/>
                </cellValueFactory>
            </TableColumn>

            <TableColumn fx:id="lastModifiedColumn" prefWidth="160" text="修改时间">
                <cellValueFactory>
                    <PropertyValueFactory property="LastModifiedUI"/>
                </cellValueFactory>
            </TableColumn>

        </columns>

    </TableView>

</GridPane>


package com.zyh.ui;


import com.zyh.model.FileMeta;
import com.zyh.service.FileService;
import com.zyh.task.FileScanner;
import javafx.application.Platform;
import javafx.beans.property.StringProperty;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import javafx.stage.DirectoryChooser;

import java.io.File;
import java.net.URL;
import java.sql.SQLException;
import java.util.List;
import java.util.ResourceBundle;

public class AppController implements Initializable {
    @FXML
    public GridPane rootPane;
    @FXML
    public Label srcDirectory;
    @FXML
    public TextField searchField;
    @FXML
    public TableView<FileMeta> fileTable;
    @FXML
    public TableColumn<FileMeta, String> nameColumn;
    @FXML
    public TableColumn<FileMeta, String> sizeColumn;
    @FXML
    public TableColumn<FileMeta, String> lastModifiedColumn;

    private final FileService fileService = new FileService();
    private final FileScanner fileScanner = new FileScanner();

    @FXML
    public void choose(MouseEvent mouseEvent) {
        DirectoryChooser chooser = new DirectoryChooser();
        File root = chooser.showDialog(rootPane.getScene().getWindow());
        if (root == null) {
            return;
        }

        Thread thread = new Thread(() -> {
            try {
                fileScanner.scan(root);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        });
        thread.start();
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        // 会在 FXMLLoader.load 执行时，实例化好 AppController 后调用
        StringProperty stringProperty = searchField.textProperty();
        stringProperty.addListener((observable, oldValue, newValue) -> {
            List<FileMeta> fileList = fileService.query(newValue.trim());
            Platform.runLater(() -> {
                fileTable.getItems().clear();
                fileTable.getItems().addAll(fileList);
            });
        });
    }
}



package com.zyh;

import com.zyh.service.DBService;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;


public class Main extends Application {
    public void start(Stage primaryStage) throws Exception {
        URL url = Main.class.getClassLoader().getResource("app.fxml");
        if (url == null) {
            throw new RuntimeException("app.fxml 文件没有找到");
        }
        Parent root = FXMLLoader.load(url);
        Scene scene = new Scene(root);

        primaryStage.setTitle("本地文件搜索工具");
        primaryStage.setWidth(1000);
        primaryStage.setHeight(900);

        primaryStage.setScene(scene);

        primaryStage.show();
    }

    public static void main(String[] args) {
        DBService service = new DBService();
        service.init();

        launch(args);
    }
}




package com.zyh.dao;


import com.zyh.util.DBUtil;
import com.zyh.util.LogUtil;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

import java.util.stream.Collectors;

public class DeleteDAO {
    public void delete(List<Integer> idList) throws SQLException {
        Connection c = DBUtil.getConnection();      // 由于实现成，一个线程只有一个 Connection 对象了，所以不需要关闭连接
        // JDK8 中支持的 stream 用法
        List<String> placeholderList = idList.stream()
                .map(id -> "?")
                .collect(Collectors.toList());
//        List<String> placeholderList = new ArrayList<>();
//        for (Integer id : idList) {
//            placeholderList.add("?");
//        }

        String placeHolder = String.join(", ", placeholderList);

        String sql = String.format("DELETE FROM file_meta WHERE id IN (%s)", placeHolder);

        try (PreparedStatement s = c.prepareStatement(sql)) {
            for (int i = 0; i < idList.size(); i++) {
                int id = idList.get(i);
                s.setInt(i + 1, id);
            }
            int i = s.executeUpdate();
            LogUtil.log("执行 SQL: %s, %s, 收到影响的行数：%d", sql, idList, i);
        }
    }

    public static void main(String[] args) throws SQLException {
        List<Integer> idList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);

        DeleteDAO dao = new DeleteDAO();
        dao.delete(idList);
    }
}



package com.zyh.dao;


import com.zyh.util.DBUtil;
import com.zyh.util.LogUtil;

import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.util.Scanner;

public class InitDAO {
    // 找到 init.sql 文件，并且读取其内容
    // 得到一组 SQL 语句 String[]
    // init.sql 是一组以 ';' 作为分割的多个 SQL 语句
    private String[] getSQLs() {
        try (InputStream is = InitDAO.class.getClassLoader().getResourceAsStream("init.sql")) {
            StringBuilder sb = new StringBuilder();
            Scanner scanner = new Scanner(is, "UTF-8");
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                sb.append(line);
            }

            return sb.toString().split(";");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public void init() {
        try {
            Connection c = DBUtil.getConnection();

            String[] SQLs = getSQLs();
            for (String sql : SQLs) {
                LogUtil.log("执行 SQL: " + sql);
                try (PreparedStatement s = c.prepareStatement(sql)) {
                    if (sql.toUpperCase().startsWith("SELECT ")) {
                        try (ResultSet resultSet = s.executeQuery()) {
                            ResultSetMetaData metaData = resultSet.getMetaData();
                            int columnCount = metaData.getColumnCount();
                            int rowCount = 0;
                            while (resultSet.next()) {
                                StringBuilder message = new StringBuilder("|");
                                for (int i = 1; i <= columnCount; i++) {
                                    String value = resultSet.getString(i);
                                    message.append(value).append(" | ");
                                }
                                LogUtil.log(message.toString());
                                rowCount++;
                            }
                            LogUtil.log("一共查询出 %d 行", rowCount);
                        }
                    } else {
                        int i = s.executeUpdate();
                        LogUtil.log("收到影响的一共有 %d 行", i);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) {
        InitDAO initDAO = new InitDAO();
        initDAO.init();
    }
}


package com.zyh.dao;


import com.zyh.model.FileMeta;
import com.zyh.util.DBUtil;
import com.zyh.util.LogUtil;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;


public class QueryDAO {
    public List<FileMeta> query(String keyword) {
        try {
            String sql = "SELECT id, name, pinyin, pinyin_first, path, is_directory, size, last_modified FROM file_meta WHERE name LIKE ? OR pinyin LIKE ? OR pinyin_first LIKE ?";

            Connection c = DBUtil.getConnection();

            try (PreparedStatement s = c.prepareStatement(sql)) {
                s.setString(1, "%" + keyword + "%");    // 模糊查找的 %
                s.setString(2, "%" + keyword + "%");
                s.setString(3, "%" + keyword + "%");

                LogUtil.log("执行 SQL: %s, %s", sql, keyword);

                List<FileMeta> result = new ArrayList<>();
                try (ResultSet resultSet = s.executeQuery()) {
                    while (resultSet.next()) {
                        int id = resultSet.getInt("id");
                        String name = resultSet.getString("name");
                        String pinyin = resultSet.getString("pinyin");
                        String pinyinFirst = resultSet.getString("pinyin_first");
                        String path = resultSet.getString("path");
                        boolean directory = resultSet.getBoolean("is_directory");
                        long length = resultSet.getLong("size");
                        long lastModified = resultSet.getLong("last_modified");

                        FileMeta fileMeta = new FileMeta(id, name, pinyin, pinyinFirst, path, directory, length, lastModified);
                        result.add(fileMeta);
                    }

                    LogUtil.log("一共查询出 %d 个文件", result.size());

                    return result;
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<FileMeta> queryByPath(String searchPath) {
        try {
            String sql = "SELECT id, name, pinyin, pinyin_first, path, is_directory, size, last_modified " +
                    "FROM file_meta WHERE path LIKE ?";

            Connection c = DBUtil.getConnection();

            try (PreparedStatement s = c.prepareStatement(sql)) {
                s.setString(1, searchPath + "%");    // 模糊查找的 %

                LogUtil.log("执行 SQL: %s, %s", sql, searchPath);

                List<FileMeta> result = new ArrayList<>();
                try (ResultSet resultSet = s.executeQuery()) {
                    while (resultSet.next()) {
                        int id = resultSet.getInt("id");
                        String name = resultSet.getString("name");
                        String pinyin = resultSet.getString("pinyin");
                        String pinyinFirst = resultSet.getString("pinyin_first");
                        String path = resultSet.getString("path");
                        boolean directory = resultSet.getBoolean("is_directory");
                        long length = resultSet.getLong("size");
                        long lastModified = resultSet.getLong("last_modified");

                        FileMeta fileMeta = new FileMeta(id, name, pinyin, pinyinFirst, path, directory, length, lastModified);
                        result.add(fileMeta);
                    }

                    LogUtil.log("一共查询出 %d 个文件", result.size());

                    return result;
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) {
        QueryDAO queryDAO = new QueryDAO();
        List<FileMeta> fileList = queryDAO.query("板书");
        for (FileMeta file : fileList) {
            System.out.println(file);
        }
    }
}



package com.zyh.dao;


import com.zyh.model.FileMeta;
import com.zyh.util.DBUtil;
import com.zyh.util.LogUtil;

import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

//保存扫描出的文件
public class SaveDAO {
    public void save(List<FileMeta> fileList) {
        try {
            String sql = "INSERT INTO file_meta " +
                    "(name, path, is_directory, pinyin, pinyin_first, size, last_modified) " +
                    "VALUES (?, ?, ?, ?, ?, ?, ?)";
            Connection c = DBUtil.getConnection();

            try (PreparedStatement s = c.prepareStatement(sql)) {
                // 一个一个文件插入 OR 批量插入
                for (FileMeta file : fileList) {
                    s.setString(1, file.getName());
                    s.setString(2, file.getPath());
                    s.setBoolean(3, file.isDirectory());
                    s.setString(4, file.getPinyin());
                    s.setString(5, file.getPinyinFirst());
                    s.setLong(6, file.getLength());
                    s.setLong(7, file.getLastModifiedTimestamp());

                    int i = s.executeUpdate();
                    LogUtil.log("执行 SQL: %s, %s, 收到影响的行数是: %d", sql, file, i);
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }


    public static void main(String[] args) throws IOException {

//        File file = new File("E:\\qq\\java\\项目一 本地搜索\\课堂代码\\day4\\2021-1-24-春招冲刺班-项目1\\板书1.png");
//        Path path = FileSystems.getDefault().getPath(file.getAbsolutePath());
//        System.out.println(path);
//        BasicFileAttributes basicFileAttributes = Files.readAttributes(path, BasicFileAttributes.class);
//        System.out.println(basicFileAttributes.size());
//        System.out.println(file.length());
//        System.out.println(file.lastModified());


        List<FileMeta> fileList = Arrays.asList(
                new FileMeta(new File("E:\\qq\\java\\项目一 本地搜索\\课堂代码\\day4\\2021-1-24-春招冲刺班-项目1\\板书1.png")),
                new FileMeta(new File("E:\\qq\\java\\项目一 本地搜索\\课堂代码\\day4\\2021-1-24-春招冲刺班-项目1\\板书2.png")),
                new FileMeta(new File("E:\\qq\\java\\项目一 本地搜索\\课堂代码\\day4\\2021-1-24-春招冲刺班-项目1\\板书3.png"))
        );
        SaveDAO saveDAO = new SaveDAO();
        saveDAO.save(fileList);

    }
}



package com.zyh.model;



import com.zyh.util.OutputUtil;
import com.zyh.util.PinYinUtil;

import java.io.File;
import java.util.Objects;

public class FileMeta {
    private final Integer id;
    private final String name;
    private final String pinyin;
    private final String pinyinFirst;
    private final String path;
    private final boolean directory;
    private final Long length;
    private final Long lastModifiedTimestamp;

    // 提供给扫描后使用
    public FileMeta(File file) {
        this.id = null;
        this.name = file.getName();
        this.pinyin = PinYinUtil.getPinYin(name);
        this.pinyinFirst = PinYinUtil.getPinYinFirst(name);
        this.path = file.getAbsolutePath();
        this.directory = file.isDirectory();
        this.length = file.length();
        this.lastModifiedTimestamp = file.lastModified();
    }

    // 提供给DB查询后使用
    public FileMeta(Integer id, String name,String pinyin,String pinyinFirst, String path, boolean directory, Long length, Long lastModifiedTimestamp) {
        this.id = id;
        this.name = name;
        this.pinyin = PinYinUtil.getPinYin(name);
        this.pinyinFirst = PinYinUtil.getPinYinFirst(name);
        this.path = path;
        this.directory = directory;
        this.length = length;
        this.lastModifiedTimestamp = lastModifiedTimestamp;
    }

    public Integer getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getPinyin() {
        return pinyin;
    }

    public String getPinyinFirst() {
        return pinyinFirst;
    }

    public String getPath() {
        return path;
    }

    public boolean isDirectory() {
        return directory;
    }

    public Long getLength() {
        return length;
    }

    public String getLengthUI() {
        return OutputUtil.formatLength(length);
    }

    public Long getLastModifiedTimestamp() {
        return lastModifiedTimestamp;
    }

    public String getLastModifiedUI() {
        return OutputUtil.formatTimestamp(lastModifiedTimestamp);
    }

    @Override
    public String toString() {
        return "FileMeta{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", pinyin='" + pinyin + '\'' +
                ", pinyinFirst='" + pinyinFirst + '\'' +
                ", path='" + path + '\'' +
                ", directory=" + directory +
                ", length=" + length +
                ", lastModifiedTimestamp=" + lastModifiedTimestamp +
                '}';
    }
    // 只要两个 FileMeta 对象的 path 一样，就是代表同一个文件
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        FileMeta fileMeta = (FileMeta) o;
        return path.equals(fileMeta.path);
    }

    @Override
    public int hashCode() {
        return Objects.hash(path);
    }
}


package com.zyh.service;


import com.zyh.dao.InitDAO;


// 该类主要提供给 “用户”在搜索框中输入待查询关键字后，进行结果查询
public class DBService {
    private final InitDAO initDAO = new InitDAO();

    public void init() {
        initDAO.init();
    }
}



package com.zyh.service;


import com.zyh.dao.DeleteDAO;
import com.zyh.dao.QueryDAO;
import com.zyh.dao.SaveDAO;
import com.zyh.model.FileMeta;
import com.zyh.util.ListUtil;

import java.sql.SQLException;
import java.util.List;
import java.util.stream.Collectors;

// 主要提供给文件扫描时，处理扫描结果和DB中结果差集时使用
public class FileService {
    private final SaveDAO saveDAO = new SaveDAO();
    private final DeleteDAO deleteDAO = new DeleteDAO();
    private final QueryDAO queryDAO = new QueryDAO();

    private void saveFileList(List<FileMeta> fileList) {
        saveDAO.save(fileList);
    }

    private void deleteFileList(List<FileMeta> fileList) throws SQLException {
        List<Integer> idList = fileList.stream().map(FileMeta::getId).collect(Collectors.toList());
        deleteDAO.delete(idList);
    }

    public void service(String path, List<FileMeta> scanResultList) throws SQLException {
        List<FileMeta> queryResultList = queryDAO.queryByPath(path);

        // 1. queryResultList - scanResultList
        List<FileMeta> ds1 = ListUtil.differenceSet(queryResultList, scanResultList);
        deleteFileList(ds1);

        // 2. scanResultList - queryResultList
        List<FileMeta> ds2 = ListUtil.differenceSet(scanResultList, queryResultList);
        saveFileList(ds2);
    }

    public List<FileMeta> query(String keyword) {
        return queryDAO.query(keyword);
    }


}



package com.zyh.task;

import com.zyh.model.FileMeta;
import com.zyh.service.FileService;

import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class FileScanner {
    private final FileService fileService = new FileService();

    public void scan(File root) throws SQLException {
        scanDir(root);
    }

    private void scanDir(File root) throws SQLException {
        if (!root.isDirectory()) {
            return;
        }
        File[] children = root.listFiles();
        if (children == null) {
            return;
        }
        List<FileMeta> scanResultList = new ArrayList<>();
        for (File child : children) {
            scanDir(child);
            if (child.isFile()) {
                scanResultList.add(new FileMeta(child));
            }
        }
        fileService.service(root.getAbsolutePath(), scanResultList);
    }



}



package com.zyh.task;

public class ScanTask {
}



package com.zyh.ui;


import com.zyh.model.FileMeta;
import com.zyh.service.FileService;
import com.zyh.task.FileScanner;
import javafx.application.Platform;
import javafx.beans.property.StringProperty;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import javafx.stage.DirectoryChooser;

import java.io.File;
import java.net.URL;
import java.sql.SQLException;
import java.util.List;
import java.util.ResourceBundle;

public class AppController implements Initializable {
    @FXML
    public GridPane rootPane;
    @FXML
    public Label srcDirectory;
    @FXML
    public TextField searchField;
    @FXML
    public TableView<FileMeta> fileTable;
    @FXML
    public TableColumn<FileMeta, String> nameColumn;
    @FXML
    public TableColumn<FileMeta, String> sizeColumn;
    @FXML
    public TableColumn<FileMeta, String> lastModifiedColumn;

    private final FileService fileService = new FileService();
    private final FileScanner fileScanner = new FileScanner();

    @FXML
    public void choose(MouseEvent mouseEvent) {
        DirectoryChooser chooser = new DirectoryChooser();
        File root = chooser.showDialog(rootPane.getScene().getWindow());
        if (root == null) {
            return;
        }

        Thread thread = new Thread(() -> {
            try {
                fileScanner.scan(root);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        });
        thread.start();
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        // 会在 FXMLLoader.load 执行时，实例化好 AppController 后调用
        StringProperty stringProperty = searchField.textProperty();
        stringProperty.addListener((observable, oldValue, newValue) -> {
            List<FileMeta> fileList = fileService.query(newValue.trim());
            Platform.runLater(() -> {
                fileTable.getItems().clear();
                fileTable.getItems().addAll(fileList);
            });
        });
    }
}



package com.zyh.util;


import javax.sql.DataSource;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.sql.Connection;
import java.sql.SQLException;
import org.sqlite.SQLiteDataSource;

// 使用单例 —— 懒汉模式
public class DBUtil {
    private static volatile DataSource dataSource = null;

    private static String getDatabasePath() {
        try {
            String classesPath = DBUtil.class.getProtectionDomain()
                    .getCodeSource().getLocation().getFile();
            File classesDir = new File(URLDecoder.decode(classesPath, "UTF-8"));
            String path = classesDir.getParent() + File.separator + "searcher.db";
            LogUtil.log("数据库文件路径为: %s", path);
            return path;
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }

    private static void initDataSource() {
        SQLiteDataSource sqLiteDataSource = new SQLiteDataSource();
        String url = "jdbc:sqlite://" + getDatabasePath();
        sqLiteDataSource.setUrl(url);

        dataSource = sqLiteDataSource;
    }

    // 单例的二次判断模式
    private static Connection initConnection() {
        if (dataSource == null) {
            synchronized (DBUtil.class) {
                if (dataSource == null) {
                    initDataSource();
                }
            }
        }

        // Connection 对象是线程不安全 —— 每个线程都必须有自己的 Connection 对象
        // 一个线程只有一个 Connection 对象没有问题
        // 使用 ThreadLocal 实现，每个线程有自己的 Connection 对象
        try {
            return dataSource.getConnection();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private static final ThreadLocal<Connection> connectionThreadLocal = ThreadLocal.withInitial(DBUtil::initConnection);

    public static Connection getConnection() {
        return connectionThreadLocal.get();
    }
}


package com.zyh.util;

import com.zyh.model.FileMeta;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ListUtil {
    // 写一个泛型方法
    // list1 - list2
    public static <E> List<E> differenceSet(List<E> list1, List<E> list2) {
        List<E> resultList = new ArrayList<>();

        for (E item : list1) {
            if (!list2.contains(item)) {    // E 类型必须正确地支持 equals 方法
                resultList.add(item);
            }
        }

        return resultList;
    }

    public static void main(String[] args) {
        List<FileMeta> list1 = Arrays.asList(
                new FileMeta(new File("E:\\qq\\java\\项目一 本地搜索\\课堂代码\\day4\\2021-1-24-春招冲刺班-项目1\\板书1.png")),
                new FileMeta(new File("E:\\qq\\java\\项目一 本地搜索\\课堂代码\\day4\\2021-1-24-春招冲刺班-项目1\\板书2.png")),
                new FileMeta(new File("E:\\qq\\java\\项目一 本地搜索\\课堂代码\\day4\\2021-1-24-春招冲刺班-项目1\\板书3.png"))
        );


        List<FileMeta> list2 = Arrays.asList(
                new FileMeta(new File("E:\\qq\\java\\项目一 本地搜索\\课堂代码\\day4\\2021-1-24-春招冲刺班-项目1\\板书2.png")),
                new FileMeta(new File("E:\\qq\\java\\项目一 本地搜索\\课堂代码\\day4\\2021-1-24-春招冲刺班-项目1\\板书3.png")),
                new FileMeta(new File("E:\\qq\\java\\项目一 本地搜索\\课堂代码\\day4\\2021-1-24-春招冲刺班-项目1\\板书4.png"))
        );

        for (FileMeta fm : differenceSet(list1, list2)) {    // 1
            System.out.println(fm);
        }
        System.out.println("=============================");
        for (FileMeta fm : differenceSet(list2, list1)) {    // 4
            System.out.println(fm);
        }
    }
}



package com.zyh.util;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class LogUtil {
    // 类型... 可变参数列表
    // Object... 代表，任意类型，任意长度都可以传入
    public static void log(String format, Object... args) {
        String message = String.format(format, args);
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = new Date();
        String now = dateFormat.format(date);
        System.out.printf("%s: %s\n", now, message);
    }

    public static void main(String[] args) {
        log("你好");
        log("今天有 %d 个同学来听课", 18);
    }
}



package com.zyh.util;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class OutputUtil {
    public static String formatLength(Long length) {
        if (length < 1024) return length+"Byte";
        if (length < 1024 * 1024) return length/1024+"kb";
        if (length < 1024*1024*1024) return length/1024/1024+"MB";
        return length/1024/1024/1024+"GB";
    }

    public static String formatTimestamp(Long timestamap) {
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        Date date = new Date(timestamap);
        return format.format(date);
    }
}



package com.zyh.util;



import net.sourceforge.pinyin4j.PinyinHelper;
import net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;
import net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;
import net.sourceforge.pinyin4j.format.HanyuPinyinToneType;
import net.sourceforge.pinyin4j.format.HanyuPinyinVCharType;
import net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;

public class PinYinUtil {
    public static String getPinYin(String name) {
        HanyuPinyinOutputFormat format = new HanyuPinyinOutputFormat();
        format.setVCharType(HanyuPinyinVCharType.WITH_V);
        format.setToneType(HanyuPinyinToneType.WITHOUT_TONE);
        format.setCaseType(HanyuPinyinCaseType.LOWERCASE);

        StringBuilder sb = new StringBuilder();
        for (char ch : name.toLowerCase().toCharArray()) {
            try {
                String[] pinyinArray = PinyinHelper.toHanyuPinyinStringArray(ch, format);
                if (pinyinArray == null || pinyinArray.length == 0) {
                    sb.append(ch);
                    continue;
                }
                sb.append(pinyinArray[0]);
            } catch (BadHanyuPinyinOutputFormatCombination badHanyuPinyinOutputFormatCombination) {
                sb.append(ch);
            }
        }

        return sb.toString();
    }

    public static String getPinYinFirst(String name) {
        HanyuPinyinOutputFormat format = new HanyuPinyinOutputFormat();
        format.setVCharType(HanyuPinyinVCharType.WITH_V);
        format.setToneType(HanyuPinyinToneType.WITHOUT_TONE);
        format.setCaseType(HanyuPinyinCaseType.LOWERCASE);

        StringBuilder sb = new StringBuilder();
        for (char ch : name.toLowerCase().toCharArray()) {
            try {
                String[] pinyinArray = PinyinHelper.toHanyuPinyinStringArray(ch, format);
                if (pinyinArray == null || pinyinArray.length == 0) {
                    sb.append(ch);
                    continue;
                }
                sb.append(pinyinArray[0].charAt(0));
            } catch (BadHanyuPinyinOutputFormatCombination badHanyuPinyinOutputFormatCombination) {
                sb.append(ch);
            }
        }

        return sb.toString();
    }

    public static void main(String[] args) {
        System.out.println(getPinYinFirst("什么都没有了"));
    }
}
