package fanxing;

import java.util.ArrayList;


/**
 *            泛型的上界    extends
 *                     T  extends  x
 *               T 是实现了X这个接口   或者是X的子类或者X自己本身
 */
class GenericAlg <T extends Comparable<T>> {
    public T maxValue(T[] array) {
        T max = array[0];
        for (int i = 1; i < array.length; i++) {
            if(array[i].compareTo(max) > 0) {
                max = array[i];
            }
        }
        return max;
    }
}
class GenericAlg2 {
    public static<T extends Comparable<T>>  T maxValue(T[] array) {
        T max = array[0];
        for (int i = 1; i < array.length; i++) {
            if(array[i].compareTo(max) > 0) {
                max = array[i];
            }
        }
        return max;
    }
}

/**
 * 通配符存在于源码当中.
 * 泛型的区别：
 * 1、通配符一般用于读取
 * 2、通配符不仅有上界  还有下界
 */
class MyPrint<T> {
    public void printf1(ArrayList<T> list) {
        for (T val:list) {
            System.out.println(val);
        }
    }
    public void print(ArrayList<?> list) {

        for (Object val:list) {
            System.out.println(val);
        }
    }
}






public class Text {

    public static void main(String[] args) {
        MyPrint<Integer> myPrint = new MyPrint<>();
        ArrayList<Integer> arrayList = new ArrayList<>();
        arrayList.add(10);
        arrayList.add(20);
        arrayList.add(30);
        myPrint.print(arrayList);

    }

    public static void main2(String[] args) {
        Integer[] array = {1,5,2,8,10,7};
        System.out.println(GenericAlg2.<Integer>maxValue(array));
        System.out.println(GenericAlg2.maxValue(array));

    }
    public static void main1(String[] args) {
        Integer[] array = {1,5,2,8,10,7};
        GenericAlg<Integer> gla = new GenericAlg<>();
        System.out.println(gla.maxValue(array));
    }


}



package fanxing;




/**
 * 内部类：
 * 1、实例内部类
 *
 * 2、静态内部类
 * 3、匿名内部类了
 * 4、本地内部类：
 */

/*class OuterClass {
    public int data1=99;
    private int data2=98;
    public static int data3;

   *//* public void testOut() {
        static int a = 10;
    }*//*

 *//**
 * 1、拿到实例内部类对象的方式
 * OuterClass.InnerClass innerClass
 *                 = outer.new InnerClass();
 * 2、不能再实例内部类当中 定义一个静态的变量.
 *    非要定义呢？ 在编译时期能够确定的值
 * 3、面试问题：实例内部类是否有额外的开销？ 有
 *   OuterClass.this
 * 4、this-->   静态的  OuterClass.this
 * 5、注意 内部类 产生的字节码文件  外部类名$内部类名.class
 *//*
    class InnerClass {
        public int data1 = 100;
        public int data4=4;
        public static final int data5 = 5;
        public void test() {
            System.out.println(data1);//100
            System.out.println(this.data1);//100
            System.out.println(OuterClass.this.data1);//99

            System.out.println(data2);
            System.out.println(data3);
            System.out.println(data4);
            System.out.println(data5);

        }
    }
}*/

/*class OuterClass {
    public int data1 = 1;
    private int data2 = 2;
    public static int data3 = 3;


    *//**
 *1、如何拿到静态内部类的实例对象？
 *2、静态内部类当中 是不可以访问外部类的非静态数据成员的
 *   非要访问呢？
 *//*
    static class InnerClass {
        public int data4 = 4;
        private int data5 = 5;
        public static int data6 = 6;

        OuterClass outerClass;

        public InnerClass(OuterClass out) {
            this.outerClass = out;
        }
        public void test() {
            System.out.println(data4);
            System.out.println(data5);
            System.out.println(data6);
            System.out.println(outerClass.data1);
        }
    }
}*/

class OuterClass {
    public void test(){
        System.out.println("test()");
    }
}

public class Text2 {

    public void func() {
        class A {
            //本地内部类
        }
    }

    public static void main(String[] args) {
        //匿名内部类
        new OuterClass(){
            @Override
            public void test() {
                System.out.println("hahahahhaha");
            }
        }.test();
    }


 /*   public static void main(String[] args) {
        OuterClass out = new OuterClass();
        OuterClass.InnerClass innerClass =
                new OuterClass.InnerClass(out);
        innerClass.test();
    }
*/
    /*public static void main(String[] args) {
        OuterClass outer = new OuterClass();
        OuterClass.InnerClass innerClass
                = outer.new InnerClass();

        innerClass.test();
    }*/
}


package fanxing;

/**
 * 泛型的意义：
 * 1、自动进行类型的检查
 * 2、自动进行类型的转换
 * 泛型的一些重点：
 * 1、泛型是怎么编译的？ 擦除机制 -》 Object
 * 2、泛型的类型 不参与类型的组成
 * 3、泛型的参数 不能是简单类型
 */
class MyArrayList<T> {
    public T[] elem;
    public int usedSize;

    public MyArrayList() {
        this.elem = (T[])new Object[10];
    }

    public void push(T val) {
        this.elem[this.usedSize] = val;
        this.usedSize++;
    }

    public T get() {
        return this.elem[0];
    }
}



public class Text1 {



    public static void main(String[] args) {
        MyArrayList<Integer> myArrayList = new MyArrayList<>();
        myArrayList.push(1);
        myArrayList.push(21);
        int val = myArrayList.get();
        System.out.println(val);
        MyArrayList<String> myArrayList2 = new MyArrayList<>();
        System.out.println(myArrayList);
        System.out.println(myArrayList2);
    }



}
