import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;

class Solution {
    public int MoreThanHalfNum_Solution(int [] array) {
        Arrays.sort(array);
        int count = 0;
        for (int i = 0;i < array.length;i++){
            if (array[array.length/2] == array[i]){
                count++;
            }
        }
        if (count <= array.length/2){
            return 0;
        }else return array[array.length/2];
    }
}


public class Main{
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        Map<String, Integer> map=new LinkedHashMap<String, Integer>();
        while(sc.hasNext()){
            String str = sc.next();
            int n = sc.nextInt();
            String[] arr = str.split("\\\\");
            String s = arr[arr.length-1];
            if(s.length() > 16) //截取
                s=s.substring(s.length()-16);
            String key=s+" "+n;
            int value=1;
            if(map.containsKey(key))
                map.put(key, map.get(key)+1);
            else {
                map.put(key, value);
            }
        }
        int count=0;
        for(String s : map.keySet()){
            count++;
            //前面的不打印，直接跳过
            if(count > (map.keySet().size()-8)) //输出最后八个记录
                System.out.println(s+" "+map.get(s));
        }
    }
}

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        String[] str = new String[n];
        for(int i = 0; i < n; i++){
            String[] s = in.nextLine().split(" ");
            
        }
    }
    public static void main1(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] num = new int[n];
        for(int i = 0; i < n; i++){
            num[i] = in.nextInt();
        }
        int K = in.nextInt();
        int D = in.nextInt();
        long[][] dpm = new long[K+1][n+1];//dpm[i][j]表示选中了i个人，以第j个人结尾的能力最大乘积
        long[][] dpn = new long[K+1][n+1];//dpn[i][j]表示选中了i个人，以第j个人结尾的能力最小乘积
        for(int j=1; j<n+1; j++){//初始
            dpm[1][j] = num[j];
            dpn[1][j] = num[j];
        }
        for(int i=1; i<K+1; i++){//初始
            dpm[i][1] = num[1];
            dpn[i][1] = num[1];
        }
        for(int i=2;i<K+1;i++){
            for(int j=2;j<n+1;j++){
                for(int k=Math.max(1,j-D);k<j;k++){
                    dpm[i][j] = Math.max(dpm[i][j],Math.max(dpm[i-1][k]*num[j],dpn[i-1][k]*num[j]));
                    dpn[i][j] = Math.min(dpn[i][j],Math.min(dpm[i-1][k]*num[j],dpn[i-1][k]*num[j]));
                }
            }
        }
        long max = Math.max(dpm[K][1],dpn[K][1]);
        for(int j=2;j<n+1;j++){
            max = Math.max(Math.max(dpm[K][j],dpn[K][j]),max);
        }
        System.out.println(max);
    }



}
