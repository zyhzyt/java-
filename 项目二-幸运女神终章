```java
package org.example.controller;

import org.example.model.Award;
import org.example.model.User;
import org.example.service.AwardService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpSession;

@RestController
@RequestMapping("/award")
public class AwardController {

    @Autowired
    private AwardService awardService;

    @PostMapping("/add")  //请求数据格式为application/json，加入@RequestBody注解
    public Object add(@RequestBody Award award, HttpSession session){
        User user = (User) session.getAttribute("user");
        int n = awardService.add(award, user.getId());
        return award.getId();//插入后，返回给前端自增主键id
    }

    @PostMapping("/update") //修改
    public Object update(@RequestBody Award award){
        int n = awardService.update(award);
        return null;
    }

    @GetMapping("/delete/{id}")  //删除,绑定参数id，使用注解@PathVariable  路径变量绑定
    public Object delete(@PathVariable Integer id){
        int n = awardService.delete(id);
        return null;
    }

}

```



package org.example.controller;

import org.example.model.Member;
import org.example.model.User;
import org.example.service.MemberService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpSession;

@RestController
@RequestMapping("/member")
public class MemberController {

    @Autowired
    private MemberService memberService;

    @PostMapping("/add")
    public Object add(@RequestBody Member member, HttpSession session){
        User user = (User) session.getAttribute("user");
        int n = memberService.add(member, user.getId());
        return member.getId();
    }

    @PostMapping("/update")
    public Object update(@RequestBody Member member){
        int n = memberService.update(member);
        return null;
    }

    @GetMapping("/delete/{id}")
    public Object delete(@PathVariable Integer id){
        int n = memberService.delete(id);
        return null;
    }


}



package org.example.controller;

import org.example.model.User;
import org.example.service.RecordService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpSession;
import java.util.List;

@RestController
@RequestMapping("/record")
public class RecordController {

    @Autowired
    private RecordService recordService;

    //抽奖：某个奖项下抽奖，一次抽多个人（插入多条抽奖记录）
    @PostMapping("/add/{awardId}")
    public Object add(@RequestBody List<Integer> memberIds,
                      @PathVariable Integer awardId){
        int n = recordService.add(memberIds, awardId);
        return null;
    }

    @GetMapping("/delete/member")
    public Object deleteByMemberId(Integer id){
        int n = recordService.deleteByMemberId(id);
        return null;
    }

    @GetMapping("/delete/award")
    public Object deleteByAwardId(Integer id){
        int n = recordService.deleteByAwardId(id);
        return null;
    }

    @GetMapping("/delete/setting")
    public Object deleteBySetting(HttpSession session){
        User user = (User) session.getAttribute("user");
        //获取userid--->关联setting_id---->关联member_id, award_id
        //--->删除关联record
        int n = recordService.deleteByUserId(user.getId());
        return null;
    }

}



package org.example.controller;

import org.example.model.Award;
import org.example.model.Member;
import org.example.model.Setting;
import org.example.model.User;
import org.example.service.AwardService;
import org.example.service.MemberService;
import org.example.service.SettingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpSession;
import java.util.List;

@RestController
@RequestMapping("/setting")
public class SettingController {

    @Autowired
    private SettingService settingService;
    @Autowired
    private AwardService awardService;
    @Autowired
    private MemberService memberService;

    /*
    进入抽奖设置页面，初始化的接口，返回页面所有需要的资源；
     setting中的属性，batchNumber
     setting目前没有的属性：
     user（用户信息），awards（根据setting_id查），members（根据setting_id查）
     */
    @GetMapping("/query")
    public Object query(HttpSession session){ //已经登录成功后可以直接使用HttpSession
        //获取session中的user
        User user = (User) session.getAttribute("user");
        //根据user_id查setting信息
        Setting setting = settingService.queryByUserId(user.getId());
        //把user设置到setting新增属性user中
        setting.setUser(user);
        //根据setting_id查award列表，设置到setting新增属性awards中
        List<Award> awards = awardService.queryBySettingId(setting.getId());
        setting.setAwards(awards);
        //根据setting_id查member列表，设置到setting新增属性member中
        List<Member> members = memberService.queryBySettingId(setting.getId());
        setting.setMembers(members);
        return setting;
    }

    @GetMapping("/update")
    public Object update(Integer batchNumber,HttpSession session){ //
        User user = (User) session.getAttribute("user");
        int n = settingService.update(batchNumber,user.getId());
        return null;
    }



}



package org.example.controller;

import org.example.exception.AppException;
import org.example.model.User;
import org.example.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

@RestController
@RequestMapping("/user")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping("/register") //注册一个用户，传入用户名和密码，包装成一个user类，传入一个头像文件参数
    public Object register(User user, MultipartFile headFile){
        //校验请求数据：后端必须要有

        //保存上传的头像到服务器本地
        if (headFile != null) {
            String head = userService.saveHead(headFile);
            //上传的路径映射为http服务路径

            //用户头像的http路径设置到user.head.把user传入数据库（插入操作）
            user.setHead(head);
        }
        userService.register(user);
        return null;
    }

    @PostMapping("/login") //登录
    public Object login(@RequestBody User user, HttpServletRequest req){
        //根据用户名查找用户
        User exist = userService.queryByUsername(user.getUsername());
        if (exist == null) throw new AppException("LOG001","用户不存在");
        //用户效验密码
        if (!user.getPassword().equals(exist.getPassword())) {
            throw new AppException("LOG002","账号或密码错误");
        }
        //效验通过，保存数据库用户（包含所有的字段）到session
        HttpSession session = req.getSession();
        session.setAttribute("user",exist);
        return null;//登录成功
    }



}



package org.example.mapper;

import org.apache.ibatis.annotations.Mapper;
import org.example.base.BaseMapper;
import org.example.model.Award;

import java.util.List;

@Mapper
public interface AwardMapper extends BaseMapper<Award> {
    List<Award> selectBySettingId(Integer id);
}


package org.example.mapper;

import org.apache.ibatis.annotations.Mapper;
import org.example.base.BaseMapper;
import org.example.model.Member;

import java.util.List;

@Mapper
public interface MemberMapper extends BaseMapper<Member> {
    List<Member> selectBySettingId(Integer id);
}


package org.example.mapper;

import org.apache.ibatis.annotations.Mapper;
import org.example.base.BaseMapper;
import org.example.model.Record;

import java.util.List;

@Mapper
public interface RecordMapper extends BaseMapper<Record> {
    int batchInsert(List<Integer> memberIds, Integer awardId);

    int deleteByMemberId(Integer memberId);

    int deleteByAwardId(Integer id);

    int deleteByUserId(Integer id);
}


package org.example.mapper;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.example.base.BaseMapper;
import org.example.model.Setting;

@Mapper
public interface SettingMapper extends BaseMapper<Setting> {
    Setting selectByUserId(Integer id);

    int update(@Param("batchNumber") Integer batchNumber,
               @Param("userId") Integer userId);//多个参数时加上注解

    Integer queryIdByUserId(Integer userId);
}


package org.example.mapper;

import org.apache.ibatis.annotations.Mapper;
import org.example.base.BaseMapper;
import org.example.model.User;

@Mapper
public interface UserMapper extends BaseMapper<User> {
    User selectByUsername(String name);
}


package org.example.service;

import org.example.mapper.AwardMapper;
import org.example.mapper.SettingMapper;
import org.example.model.Award;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AwardService {

    @Autowired
    private AwardMapper awardMapper;
    @Autowired
    private SettingMapper settingMapper;

    public List<Award> queryBySettingId(Integer id) {
        return awardMapper.selectBySettingId(id);
    }

    public int add(Award award, Integer userId) {
        //通过userId找settingId: 可以调用已有的selectByUserId
        Integer settingId = settingMapper.queryIdByUserId(userId);
        //设置award中settingId属性
        award.setSettingId(settingId);
        //插入一条award数据/对象
        return awardMapper.insertSelective(award);
    }


    public int update(Award award) { //修改
        return awardMapper.updateByPrimaryKeySelective(award);
    }

    public int delete(Integer id) { //删除
        return awardMapper.deleteByPrimaryKey(id);
    }
}



package org.example.service;

import org.example.mapper.MemberMapper;
import org.example.mapper.SettingMapper;
import org.example.model.Member;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class MemberService {

    @Autowired
    private MemberMapper memberMapper;
    @Autowired
    private SettingMapper settingMapper;


    public List<Member> queryBySettingId(Integer id) {
        return memberMapper.selectBySettingId(id);
    }

    public int add(Member member, Integer userId) {
        Integer settingId = settingMapper.queryIdByUserId(userId);
        member.setSettingId(settingId);
        return memberMapper.insertSelective(member);
    }

    public int update(Member member) {
        return memberMapper.updateByPrimaryKeySelective(member);
    }

    public int delete(Integer id) {
        return memberMapper.deleteByPrimaryKey(id);
    }


}



package org.example.service;

import org.example.mapper.RecordMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class RecordService {

    @Autowired
    private RecordMapper recordMapper;

    //批量插入抽奖记录
    public int add(List<Integer> memberIds, Integer awardId) {
        return recordMapper.batchInsert(memberIds, awardId);
    }

    public int deleteByMemberId(Integer memberId) {
        return recordMapper.deleteByMemberId(memberId);
    }

    public int deleteByAwardId(Integer id) {
        return recordMapper.deleteByAwardId(id);
    }

    public int deleteByUserId(Integer id) {
        return recordMapper.deleteByUserId(id);
    }
}



package org.example.service;

import org.example.mapper.SettingMapper;
import org.example.model.Setting;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class SettingService {

    @Autowired
    private SettingMapper settingMapper;

    public Setting queryByUserId(Integer id) {
        return settingMapper.selectByUserId(id);
    }

    public int update(Integer batchNumber, Integer userId) {
        return settingMapper.update(batchNumber,userId);
    }
}


package org.example.service;

import org.example.exception.AppException;
import org.example.mapper.SettingMapper;
import org.example.mapper.UserMapper;
import org.example.model.Setting;
import org.example.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

@Service
public class UserService {

    @Autowired
    private UserMapper userMapper;
    @Autowired
    private SettingMapper settingMapper;

    @Value("${user.head.local-path}")
    private String headLocalPath;

    @Value("{user.head.remote-path}")
    private String headRemotePath;

    private static final DateFormat DF = new SimpleDateFormat("yyyyMMdd");

    public String saveHead(MultipartFile headFile) { //保存文件
        //文件夹当天：文件路径的间隔符和操作系统相关：可以使用File.separator
        Date now = new Date();
        String dirUri = "/"+DF.format(now);// 作为一个文件夹 /或者\\
        File dir = new File(headLocalPath+dirUri);
        if (!dir.exists()) dir.mkdirs(); //如果没有就创建
        //保存在本地以天为单位的文件夹，保证文件夹唯一：随机字符串作为文件名，但是保留后缀
        String headName = UUID.randomUUID().toString()+  //生成唯一的随机数
                headFile.getOriginalFilename().
                        substring(headFile.getOriginalFilename().lastIndexOf("."));
        String uri = dirUri+"/"+headName;//这个uri需要返回
        try {
            headFile.transferTo(new File(headLocalPath+uri)); //保存文件或者路径
        } catch (IOException e) {
            throw new AppException("REG001","上传头像出错");
        }
        return headRemotePath+uri;//设置到head里
    }


    //事务处理：多个更新必须，有部分查询加更新的时候也需要
    //可以手动指定隔离级别和传播特性，aop实现方法前加入开启事务逻辑，
    // 方法执行后抛异常rollback，没有异常com
    //禁止try catch吃掉异常
    @Transactional
    public void register(User user) { //注册
        //效验用户名不能重复
        //插入user数据
        //插入后自增主键会按照userGeneratedKeys = true设置到对象属性
        int n = userMapper.insertSelective(user);
        //插入setting数据：登录后，进入设置页面，添加奖项和抽奖人员，需要setting_id
        Setting setting = new Setting();
        setting.setUserId(user.getId());//观察setting表里的user_id建
        setting.setBatchNumber(8);//每次抽奖的数量：设置一个默认值（业务决定）
        settingMapper.insertSelective(setting);

    }


    //根据username查找用户
    public User queryByUsername(String username) {
        return userMapper.selectByUsername(username);
    }


}



<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.AwardMapper">
  <resultMap id="BaseResultMap" type="org.example.model.Award">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="count" jdbcType="INTEGER" property="count" />
    <result column="award" jdbcType="VARCHAR" property="award" />
    <result column="setting_id" jdbcType="INTEGER" property="settingId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, count, award, setting_id, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from award
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from award
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="org.example.model.Award" useGeneratedKeys="true">
    insert into award (name, count, award, 
      setting_id, create_time)
    values (#{name,jdbcType=VARCHAR}, #{count,jdbcType=INTEGER}, #{award,jdbcType=VARCHAR}, 
      #{settingId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="org.example.model.Award" useGeneratedKeys="true">
    insert into award
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="count != null">
        count,
      </if>
      <if test="award != null">
        award,
      </if>
      <if test="settingId != null">
        setting_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="count != null">
        #{count,jdbcType=INTEGER},
      </if>
      <if test="award != null">
        #{award,jdbcType=VARCHAR},
      </if>
      <if test="settingId != null">
        #{settingId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.example.model.Award">
    update award
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="count != null">
        count = #{count,jdbcType=INTEGER},
      </if>
      <if test="award != null">
        award = #{award,jdbcType=VARCHAR},
      </if>
      <if test="settingId != null">
        setting_id = #{settingId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.example.model.Award">
    update award
    set name = #{name,jdbcType=VARCHAR},
      count = #{count,jdbcType=INTEGER},
      award = #{award,jdbcType=VARCHAR},
      setting_id = #{settingId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectBySettingId" resultMap="BaseResultMap">
    select
         <include refid="Base_Column_List" />
    from award
        where setting_id = #{id}
  </select>
</mapper>


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.MemberMapper">
  <resultMap id="BaseResultMap" type="org.example.model.Member">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="no" jdbcType="VARCHAR" property="no" />
    <result column="setting_id" jdbcType="INTEGER" property="settingId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, no, setting_id, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from member
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from member
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="org.example.model.Member" useGeneratedKeys="true">
    insert into member (name, no, setting_id, 
      create_time)
    values (#{name,jdbcType=VARCHAR}, #{no,jdbcType=VARCHAR}, #{settingId,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="org.example.model.Member" useGeneratedKeys="true">
    insert into member
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="no != null">
        no,
      </if>
      <if test="settingId != null">
        setting_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="no != null">
        #{no,jdbcType=VARCHAR},
      </if>
      <if test="settingId != null">
        #{settingId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.example.model.Member">
    update member
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="no != null">
        no = #{no,jdbcType=VARCHAR},
      </if>
      <if test="settingId != null">
        setting_id = #{settingId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.example.model.Member">
    update member
    set name = #{name,jdbcType=VARCHAR},
      no = #{no,jdbcType=VARCHAR},
      setting_id = #{settingId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectBySettingId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from member
    where setting_id = #{id}
  </select>
</mapper>


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.RecordMapper">
  <resultMap id="BaseResultMap" type="org.example.model.Record">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="member_id" jdbcType="INTEGER" property="memberId" />
    <result column="award_id" jdbcType="INTEGER" property="awardId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, member_id, award_id, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="org.example.model.Record" useGeneratedKeys="true">
    insert into record (member_id, award_id, create_time
      )
    values (#{memberId,jdbcType=INTEGER}, #{awardId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="org.example.model.Record" useGeneratedKeys="true">
    insert into record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="memberId != null">
        member_id,
      </if>
      <if test="awardId != null">
        award_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="memberId != null">
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="awardId != null">
        #{awardId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.example.model.Record">
    update record
    <set>
      <if test="memberId != null">
        member_id = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="awardId != null">
        award_id = #{awardId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.example.model.Record">
    update record
    set member_id = #{memberId,jdbcType=INTEGER},
      award_id = #{awardId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <insert id="batchInsert">
    insert into record(member_id, award_id)
    values
    <foreach collection="memberIds"
             item="memberId"
             separator=",">
      (#{memberId}, #{awardId})
    </foreach>
  </insert>

  <delete id="deleteByMemberId">
    delete from record where member_id=#{id}
  </delete>

  <delete id="deleteByAwardId">
    delete from record where award_id=#{id}
  </delete>
  <!-- 多表关联删除：DELETE t1 FROM t1,t2 WHERE t1.id=t2.id -->
  <delete id="deleteByUserId">
    delete record from user,setting,award,member,record
    where user.id=setting.user_id
      and setting.id=award.setting_id
      and setting.id=member.setting_id
      and (award.id=record.award_id or member.id=record.member_id)
      and user.id=#{id}
  </delete>

</mapper>


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.SettingMapper">
  <resultMap id="BaseResultMap" type="org.example.model.Setting">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="batch_number" jdbcType="INTEGER" property="batchNumber" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, batch_number, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from setting
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from setting
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="org.example.model.Setting" useGeneratedKeys="true">
    insert into setting (user_id, batch_number, create_time
      )
    values (#{userId,jdbcType=INTEGER}, #{batchNumber,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="org.example.model.Setting" useGeneratedKeys="true">
    insert into setting
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="batchNumber != null">
        batch_number,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="batchNumber != null">
        #{batchNumber,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.example.model.Setting">
    update setting
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="batchNumber != null">
        batch_number = #{batchNumber,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.example.model.Setting">
    update setting
    set user_id = #{userId,jdbcType=INTEGER},
      batch_number = #{batchNumber,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByUserId" resultMap="BaseResultMap">
    select
        <include refid="Base_Column_List" />
    from setting
        where user_id = #{id}
  </select>
  <update id="update">
    update setting set batch_number=#{batchNumber}
    where user_id=#{userId}
  </update>

  <!--代表自己需要的返回参数类型为java.lang.Integer-->
  <select id="queryIdByUserId" resultType="java.lang.Integer">
    select id from setting where user_id=#{userId}
  </select>
</mapper>


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="org.example.model.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="age" jdbcType="INTEGER" property="age" />
    <result column="head" jdbcType="VARCHAR" property="head" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, username, password, nickname, email, age, head, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="org.example.model.User" useGeneratedKeys="true">
    insert into user (username, password, nickname, 
      email, age, head, create_time
      )
    values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER}, #{head,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="org.example.model.User" useGeneratedKeys="true">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="head != null">
        head,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=INTEGER},
      </if>
      <if test="head != null">
        #{head,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.example.model.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="head != null">
        head = #{head,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.example.model.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER},
      head = #{head,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByUsername" resultMap="BaseResultMap">
    select
         <include refid="Base_Column_List" />
    from user
          where username = #{username}
  </select>
</mapper>

